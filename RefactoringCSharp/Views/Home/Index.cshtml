@{  ViewBag.Title = "Refactoring C#";}

<form action="">
    <div>
        <blockquote>
            <p>
                <b>Refactoring</b>...is a <b>disciplined technique</b> for restructuring an existing body of code, altering its internal structure without changing its external behavior.
            </p>
            <p class="small">Martin Fowler - <a href="http://refactoring.com">refactoring.com</a></p>
        </blockquote>

        <blockquote>
            <p>
                <b>Code without tests is bad code</b>. It doesn't matter how well written it is; it doesn't matter how pretty or object-oriented or well-encapsulated it is. With tests, we can change the behaviour of our code quickly and verifiably. Without them, we really don't know if our code is getting better or worse.
            </p>
            <p class="small">Michael Feathers - Working with Legacy Code</p>
        </blockquote>

    <div>
        <h1>Why Refactor?</h1>
        <p>Because having well maintained code makes it easier to:</p>
        <ul>
            <li>Find bugs</li>
            <li>Test (so less bugs)</li>
            <li>Add features</li>
            <li>Bring new developers up to speed</li>
            <li>Solve performance issues</li>
            <li>Prevent developer burnout</li>
        </ul>
    </div>

        <div>
            <h1>Formal Approaches</h1>
            <p>A lot of this website is based on the work of</p>
            <ul>
                <li>Martin Fowler</li>
                <li>Michael Feathers</li>
            </ul>
            <p>with the goal of giving a <b>practical</b> guide on how to refactor in C# ASP.NET MVC
            </p>
        </div>

    <p>
            Below is a <b>starting checklist</b> for refactoring, towards <b>good</b> testable code.
        </p>

        <div>
            <h1>1 - Simple checks</h1>

            <ul style="list-style: none;">
                <li><label><input type="checkbox" name="compile" value="Bike"> Does it <b>compile</b>?</label></li>
                <li><label><input type="checkbox" name="compile" value="Bike"> Does it <b>run</b> producing the <b>correct</b> result?</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Is the code <b>formatted</b>?</label> </li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Are there unsorted unnecessary usings?</label> </li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Delete commented out code</label> </li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Delete unnecessary code (greyed out in RS)</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Delete unnecessary comments</label></li>
            </ul>

            <pre class="prettyprint" title="Useful VS and R# commands">
Alt E I O A  #  VS Remove and tidy unused usings         
Ctrl K D  # VS Auto Format
Ctrl L # RS Delete line
Ctrl T # RS Go to Type eg HC HomeController
Ctrl - # RS Recent files go back to
</pre>
        </div>

        <div>
            <h1>2 - Rename and Auto Refactors</h1>
            <h2>Methods</h2>
            <ul>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Methods - <b>single focus</b>  VerbNoun</label></li>
                <ul>
                    <li>WriteToLog</li>
                    <li>GetPerson</li>
                </ul>
                asdfasdf

                <li>
                    <li>isAdministrator - good clear variable name (favour the positive)</li>
                    <li>_thing or thing - consistency important</li>
                </ul>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Favour short variable names for local scope</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Favour as little code as possible</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> RS refactor suggestions to make more <b>readable</b></label></li>
                <ul>
                    <li>for to foreach</li>
                    <li>Move variable to inner scope - RS</li>
                    <li>Inline temp variables - RS (careful!)</li>
                </ul>
            </ul>

            <pre class="prettyprint" title="Useful VS and R# commands">
Alt Enter # RS Quick Actions
Ctrl . # VS Quick Actions
Ctrl Alt RightArrow # RS Highlight
Ctrl R R  # Rename
</pre>
        </div>

        <div>
            <h1>3 - Long Methods</h1>
            <ul>
                <li>Commonly methods are long, and can be split apart to make <b>simpler to understand</b></li>
                <li>20 line max methods, Rule of Thumb</li>
                <li>Minimize Parameters</li>
                <li>Avoid flag argumnets eg Render(bool useColour), could be RenderWithColour() and RenderWithoutColour()</li>
                <li>Favour methods which are <b>Commands</b> (ie do something and return void), or <b>Queries</b> (no side effects, return something) - CQS</li>
            </ul>
            <pre class="prettyprint" title="Useful VS and RS commands">
Ctrl Shift R  # RS Refactor this
Ctrl R M  # RS Extract Method
Shift Alt L # RS Go to file in Solution Explorer
</pre>
        </div>

        <div>
            <h1>4 - Unit Test</h1>
            <p>Red, Green, Refactor towards:</p>
            <ul>
                <li>Short methods which are more <b>easily testable</b> and <b>simpler</b></li>
                <li>Performance - measure using timings.. Can algorithm be smarter eg less iterations in loops</li>
            </ul>
        </div>

        <div>
            <h1>5 - Error Handling</h1>
            <p>Write first!</p>
            <ul>
                <li>Use <b>Exceptions</b> when things are exceptional! ie not return codes</li>
                <li>Don't return null</li>
            </ul>
        </div>

        <div>
            <h1>6 - Logging</h1>
            <p>Is good</p>
            <ul>
                <li>Log!</li>
            </ul>
        </div>

        <div>
            <h1>7 - Small Parts to build a System</h1>
            <p></p>
            <ul>
                <li>Separation of Main</li>
                <li>Dependency Injection</li>
                <li>Small Classes</li>
            </ul>
        </div>

        <hr />
        <div>
            <h1>Examples!</h1>
            <p>
                Using the steps above, I will walk through examples giving the path of getting to <b>good</b> code
            </p>
            <ul>
                <li>Euler1</li>
                <li>Euler17</li>
                <li>Fractals</li>
                <li>Console importer ETL</li>
                <li>World bank webservice game</li>
                <li>Databases (importer / ETL apps / MVC CRUD apps)</li>
                <li>CRUD with ADO</li>
                <li>CRUD with Dapper</li>
                <li>CRUD with Sprocs</li>
                <li>Validation</li>
                <li>Paging, Sorting and Filtering, and Profiling</li>
                <li>Exception handling, CQS, DI and IoC and Service Locator, Logging, Emailling</li>
                <li>Selenium style testing</li>
                <li>Refactoring a large application (OSS?)</li>
            </ul>

            <h2>Euler1</h2>
            <p>
                From <a href="https://projecteuler.net/problem=1">https://projecteuler.net/problem=1</a>
            </p>
            <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
            <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>

            <pre class="prettyprint">
// code here to demo a compiling but non working version
</pre>
            <a href="/pages/Euler1">Link to full article</a>

            <h2>Euler17</h2>
            <p>
                From <a href="https://projecteuler.net/problem=17">https://projecteuler.net/problem=17</a>
            </p>
            <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
            <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>

            <pre class="prettyprint">
// code here to demo a compiling but non working version
</pre>
            <a href="/pages/Euler17">Link to full article</a>


            <h2>Fractals</h2>
            <p>
                From <a href="http://23programs.blogspot.co.uk/2012/03/c-mandelbrot-set-fractal.html">here</a> a refactoring of this code
            </p>
            <p>A windows forms app for display Fractal images</p>

            <pre class="prettyprint">
// code
</pre>
            <a href="/pages/Euler17">Link to full article</a>
            <h2>CRUD with ADO</h2>
            <p>Customer and Address. 1 Customer can have many delivery addresses eg Home, Work, School</p>
            <p>This is a very simple example of</p>
            <ul>
                <li>Create Read Update Delete (CRUD)</li>
                <li>Customers</li>
                <li>Addresses</li>
            </ul>
            <p>Starting from the simplest MVC5 app, lets refactor:</p>
            <pre class="prettyprint">
// starting code 
</pre>
            <a href="/pages/CRUD_using_ADO">Link to full article</a>
        </div>
        @*        Conways GOL, 1 or 2 pages only of code, satnav shortest path code, ball bouncing back and forth*@
    </div>
</form>