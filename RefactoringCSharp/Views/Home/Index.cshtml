@{
    ViewBag.Title = "Refactoring C#";
}

<div>

    <blockquote>
        <p>
            <b>Code without tests is bad code</b>. It doesn't matter how well written it is; it doesn't matter how pretty or object-oriented or well-encapsulated it is. With tests, we can change the behaviour of our code quickly and verifiably. Without them, we really don't know if our code is getting better or worse.
        </p>
        <p class="small">Michael Feathers - Working with Legacy Code</p>
    </blockquote>

    <p>
        Below is a <b>starting checklist</b> for refactoring, towards <b>good</b> testable code.
    </p>
    <h1>0 - Source Control</h1>

    <p>
        Source control is a <b>good thing</b>. Let's consider <b>Git</b> as it is easy to use locally. For refactoring I like to be able to:
    </p>
    <ul>
        <li>Review what has changed</li>
        <li>Be able to revert back</li>
        <li>Git Posh (PowerShell) - installed automatically with <a href="https://desktop.github.com/">https://desktop.github.com/</a></li>
        <li><a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore " target="_blank">Gitignore VisualStudio</a></li>
        <li>
            <a href="http://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298">Git lg alias</a>,
            <a href="http://www.programgood.net/2015/08/21/ChromeNotepadAndDifftool.aspx" _target="_blank">Difftool and Mergetool setup</a>, 
            <a href="http://www.barbarianmeetscoding.com/wiki/git-cheatsheet/" target="_blank">Git Cheatsheet (full)</a>, 
            <a href="http://haacked.com/archive/2014/07/28/github-flow-aliases/">Phil Haack tips</a>
        </li>
    </ul>

    <p>Git commands</p>
<pre class="prettyprint" title="Useful git commands">
Copy-Item ..\Refactoring\.gitignore . # Copy in a .gitignore file from a local project
Copy-Item ..\Refactoring\d.ps1 # Shortcut to load solution from GitShell type .\d
git init  # Initialise the git repo.  eg in c:\dev\Euler22  do a git init.
git add . # Add all files (but not ones in the .gitignore file)
git add -A . # Include deletes in the 'add'
git commit -m "initial commit"
git commit -am "initial commit" # Add and commit in the same line
git push
git pull
git rm directory\file  # Deletes the file from local filesystem and git (but still in history)
git rm -r packages # Recursively deletes the packages folder
git mergetool # Use the VS merge tool 
git difftool  # Easy in VS2015 to right click and do show history
git checkout -b FeatureBranchName # Branch and checkout
git branch # Show branches
git merge Master # Do this whilst on feature branch
git checkout Master
git reset bc2d7  # Undoes all commits after bc2d7 (first 5 chars of hash), preserving changes locally
git reset --hard bc2d7 # Undoes all commits after bc2d7, discarding local changes
git log # Show commits
git lg # Show one liners (see link above for alias)
git checkout da69cce # Puts head back to that commit!  Note - no longer on a branch, so need to checkout master below:
git checkout master # Goes back
</pre>

    <div>
        <h1>1 - Simple checks</h1>

        <ul>
            <li>Does it <b>compile</b>?</li>
            <li>Does it <b>run</b> producing the <b>correct</b> result?</li>
            <li>Delete commented out code</li>
            <li>Delete comments if possible</li>
            <li>Delete unnecessary code (greyed out in R#)</li>
        </ul>

<pre class="prettyprint" title="Useful VS and R# commands">
Alt E I O A  #  VS Remove and tidy unused usings         
Ctrl K D  # VS Auto Format
</pre>
    </div>

    <div>
        <h1>2 - Rename</h1>

        <ul>
            <li>Rename classes/methods/variables to make <b>clearer</b></li>
            <li>Favour short variable names for small scope</li>
            <li>Favour as little code as possible</li>
            <li>R# look at refactor suggestions eg for to foreach</li>
            <li>WriteToLog - a good clear method name (Verb)</li>
            <li>isAdministrator - a good clear variable name (favour the positive)</li>
            <li>Consistency - eg _thing or thing</li>
        </ul>

        <pre class="prettyprint" title="Useful VS and R# commands">
Ctrl R R  # VS Rename
</pre>

    </div>

    <div>
        <h1>3 - Long Methods</h1>
        <ul>
            <li>Commonly methods are long, and can be split apart to make <b>simpler to understand</b></li>
            <li>20 line max methods, Rule of Thumb</li>
            <li>Minimize Parameters</li>
            <li>Avoid flag argumnets eg Render(bool useColour), could be RenderWithColour() and RenderWithoutColour()</li>
            <li>Favour methods which are <b>Commands</b> (ie do something and return void), or <b>Queries</b> (no side effects, return something) - CQS</li>
        </ul>
        <pre class="prettyprint" title="Useful VS and RS commands">
Ctrl Shift R  # RS Refactor this
Ctrl R Ctrl M  # RS Extract Method
</pre>
    </div>

    <div>
        <h1>4 - Unit Test</h1>
        <p>Red, Green, Refactor towards:</p>
        <ul>
            <li>Short methods which are more <b>easily testable</b> and <b>simpler</b></li>
            <li>Performance - measure using timings.. Can algorithm be smarter eg less iterations in loops</li>
        </ul>
    </div>

    <div>
        <h1>5 - Pragmatism</h1>
        <p></p>
        <p>
            A lot of developers like <b>shiny</b> things! Some actively disklike anything new. There is a healthy middle ground. As I'm in the former camp, I usually ask myself how much can you take out so the code is:
        </p>
        <ul>
            <li>Testable</li>
            <li>Easily understandable</li>
            <li>Simplest</li>
            <li>Performant (if that is needed)</li>
        </ul>
        <p>eg do you really need xyz Pattern? Latest thinking on blog article abc... Is an IoC container really necessary, or would Pure DI be easier for the next programmer to understand. ie you are programming for the next person to understand easily.</p>

        <p>
            Remember you are a <b>REAL</b> developer (IMO) if you are <b>pragmatic</b>
        </p>
    </div>

    <hr />
    <div>
        <h1>Examples!</h1>
        <p>Using the 0-5 steps above, I will walk through examples giving the path of getting to <b>good</b> code</p>
        <ul>
            <li>Euler1</li>
            <li>Euler17</li>
            <li>Fractals</li>
            <li>Console importer ETL</li>
            <li>World bank webservice game</li>
            <li>Databases (importer / ETL apps / MVC CRUD apps)</li>
            <li>CRUD with ADO</li>
            <li>CRUD with Dapper</li>
            <li>CRUD with Sprocs</li>
            <li>Validation</li>
            <li>Paging, Sorting and Filtering, and Profiling</li>
            <li>Exception handling, CQS, DI and IoC and Service Locator, Logging, Emailling</li>
            <li>Selenium style testing</li>
        </ul>

        <h2>Euler1</h2>
        <p>
            From <a href="https://projecteuler.net/problem=1">https://projecteuler.net/problem=1</a>
        </p>
        <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
        <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>

        <pre class="prettyprint">
// code here to demo a compiling but non working version
</pre>

        <p>
            Here is a <b>finished example*</b> (not yet) of refactoring. Over many years I've found it hard to find examples of what I consider to be good code (although according to Feathers, <b>good code has to be under test</b>). You may not agree with this. There is <b>always a better way</b>.
        </p>
        <pre class="prettyprint">
using System;
using System.Data.SqlClient;
using System.IO;
namespace Mateer.RSharpCommentsAndDeadCode
{
    // This Console App is run from a scheduled task nightly on the App server
    // to import in dumped files which the Oracle team put there
    // It should try each line independently and be resilient if the line fails to parse
    // It should send an email on a line fail, or global exception
    // It should log to a database table
    public class ETL
    {
        public static void ReadFromAFileAndDisplayQuote()
        {
            var fileTextLines = File.ReadAllLines(@@"..\..\quotesWithTitles.csv");
            foreach (string line in fileTextLines)
            {
                string[] titleAndQuote = line.Split(',');
                string title = titleAndQuote[0];
                Console.WriteLine("title: {0}", title);
                string quote = titleAndQuote[1];
                Console.WriteLine("quote: {0}", quote);
                var connectionString = @@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Dev\Refactoring\PresentationRefactoring\Database1.mdf;Integrated Security=True";
                using (var connection = new SqlConnection(connectionString))
                {
                    using (var cmd = new SqlCommand("INSERT INTO Quotes (Title, Text) VALUES (@@Title, @@Quote)", connection))
                    {
                        cmd.Parameters.AddWithValue("@@Title", title);
                        cmd.Parameters.AddWithValue("@@Quote", quote);
                        connection.Open();
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }
    }
}
</pre>
    </div>

    <div>
        <h1>a - Documentation</h1>
        <p>
            Do you have a simple document which:
        </p>
        <ul>
            <li>1 - Gives an introduction to the whole project</li>
            <li>2 - Context - Includes a <b>context diagram</b> explaining the whole system</li>
            <li>3 - Functional requirements - what does the system do in English using DSL</li>
            <li>4 - Quality (non Functional requirements) - eg performance, scalability, security, browser compatibility, localisation, I18n</li>
            <li>5 - Constraints - eg budget</li>
            <li>6 - Design principles - eg package by component vs package by layer?, Testing (unit and integration)</li>
            <li>7 - Software Architecture - more detailed diagram showing containers eg Web app, DB, Filesystem, NoSQL, Scheduled task app, external systems</li>
            <li>8 - Infrastructure Architecture - eg where is live server, and credentials to get there</li>
            <li>9 - Deployment - github, TeamCity to deploy file.</li>
            <li>10 - Operation and Support - how to check if services are running, and how to restart. How to monitor eg pingdom/uptimerobot. Backups video Dropbox.</li>
        </ul>
        <p>
            Above taken from <a href="https://leanpub.com/techtribesje" target="_blank">https://leanpub.com/techtribesje</a> which is available to read online for free.
        </p>
        <p>
            <a href="https://www.youtube.com/watch?v=oDpdaXt0HQI&feature=youtu.be" target="_blank">https://www.youtube.com/watch?v=oDpdaXt0HQI&feature=youtu.be</a>
        </p>
        <p>
            <a href="https://lostechies.com/andrewsiemer/2015/12/09/easy-way-to-gain-high-level-understanding/" target="_blank">https://lostechies.com/andrewsiemer/2015/12/09/easy-way-to-gain-high-level-understanding/</a>
        </p>
    </div>

    <div>
        <h1>b - Does it need Refactoring?</h1>
        <blockquote>
            Any programmer worth his or her salt should already be refactoring aggressively
            <div class="small">Jeff Atwood - co-founder of StackOverflow</div>
        </blockquote>

        <p>
            From <a href="http://blog.codinghorror.com/code-smells/">http://blog.codinghorror.com/code-smells/</a> are there any <b>smells</b> in your current code? If yes, refactor!
        </p>


        <p>
            Principle of least surprise, KISS, YAGNI, DRY and Rule of 3. https://lostechies.com/derickbailey/2012/10/31/abstraction-the-rule-of-three/. Is there a 'feature' that is missing eg easy to change the codebase - compared to other software eg how quickly can I make a change? Will explore the common pain points eg: Features take a long time to dev, The codebase is hard to work with because it is complex, How to quantify what a 'good' codebase looks like eg cyclomatic complexity
        </p>
    </div>

    <div>
        <h1>z - Code Reviews</h1>

        <p>Goals of a Code Review</p>

        <ul>
            <li>Spread the knowledge in the team</li>
            <li>Make the code 'better'</li>
            <li>Make programmers better by learning off each other</li>
        </ul>

        <p>
            From <a href="http://ayende.com/blog/3475/code-reviews-are-not-just-about-the-code">link</a>
        </p>

        <blockquote>
            <p>The most important thing ... is the actual interaction in code reviews.</p>
            <p>1 - Go over the code with only a general idea of what is going on, to find out if there are any areas which need special attention. Then talk to developer</p>
            <p>2 - Go over the code each line at least once. Then chat to the developer</p>
        </blockquote>


        <h3>general feedback</h3>
        <ul>
            <li>comments unnecessary?</li>
            <li>split into a few functions from Main()</li>
            <li>test those new function - do they pass the examples given eg COLIN?</li>
        </ul>

        <h3>specific feedback</h3>
        <ul>
            <li>make algorithm simpler!</li>
            <li>sorting... better way!</li>
            <li>reading from a file then parsing</li>
        </ul>
    </div>

    <p>
        <hr />
    </p>

    <div>
        <h1>Code Smells</h1>
        <p>Perhaps it is easier to look at code, and consider if it <b>smells</b>?</p>
        <ul>
            <li>Long method</li>
            <li>Too many parameters </li>
            <li>Complexity</li>
            <li>Duplication</li>
        </ul>
        <p><a href="http://blog.codinghorror.com/code-smells/">http://blog.codinghorror.com/code-smells/</a></p>
    </div>

    <p>
        <hr />
    </p>




    <div>
        <h1>SQL Refactoring</h1>

        <p>A good start is to alwyas keep an eye on the quries the app is actually doing eg Miniprofiler to give you page load/sql query times as you develop</p>
        <p>
            <a href="http://ayende.com/blog/4505/analyzing-the-mvc-music-store-data-access">http://ayende.com/blog/4505/analyzing-the-mvc-music-store-data-access</a>
        </p>
    </div>

    <div>
        <h1>Architecture</h1>
        <p>KISS</p>
        <p>
            <a href="http://ayende.com/blog/19457/review-microsoft-n-layer-app-sample-part-i">http://ayende.com/blog/19457/review-microsoft-n-layer-app-sample-part-i</a>
        </p>
    </div>
</div>