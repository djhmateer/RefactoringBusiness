@{  ViewBag.Title = "Refactoring C#";}

<form action="">
    <div>
        @*<p>@ViewBag.Message</p>*@
        <blockquote>
            <p>
                <b>Code without tests is bad code</b>. It doesn't matter how well written it is; it doesn't matter how pretty or object-oriented or well-encapsulated it is. With tests, we can change the behaviour of our code quickly and verifiably. Without them, we really don't know if our code is getting better or worse.
            </p>
            <p class="small">Michael Feathers - Working with Legacy Code</p>
        </blockquote>

        <p>
            Below is a <b>starting checklist</b> for refactoring, towards <b>good</b> testable code.
        </p>
        
        <div>
            <h1>1 - Simple checks</h1>

            @*This didn't give me the indent*@
            @*<ul class="list-unstyled">*@
            <ul style="list-style: none;">
                <li><label><input type="checkbox" name="compile" value="Bike"> Does it <b>compile</b>?</label></li>
                <li><label><input type="checkbox" name="compile" value="Bike"> Does it <b>run</b> producing the <b>correct</b> result?</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Delete commented out code</label> </li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Delete unnecessary code (greyed out in RS)</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Delete unnecessary comments</label></li>
            </ul>

            <pre class="prettyprint" title="Useful VS and R# commands">
Alt E I O A  #  VS Remove and tidy unused usings         
Ctrl K D  # VS Auto Format
Ctrl L # RS Delete line
Ctrl T # RS Go to Type eg HC HomeController
Ctrl - # RS Recent files go back to
</pre>
        </div>

        <div>
            <h1>2 - Rename and Auto Refactors</h1>
            <ul>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Rename classes/methods/variables to make <b>clearer</b></label></li>
                <ul>
                    <li>WriteToLog - good clear method name (Verb)</li>
                    <li>isAdministrator - good clear variable name (favour the positive)</li>
                    <li>_thing or thing - consistency important</li>
                </ul>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Favour short variable names for local scope</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> Favour as little code as possible</label></li>
                <li><label><input type="checkbox" id="cbox" name="compile" value="Bike"> RS refactor suggestions to make more <b>readable</b></label></li>
                <ul>
                    <li>for to foreach</li>
                    <li>Move variable to inner scope - RS</li>
                    <li>Inline temp variables - RS (careful!)</li>
                </ul>
            </ul>

            <pre class="prettyprint" title="Useful VS and R# commands">
Alt Enter # RS Quick Actions
Ctrl . # VS Quick Actions
Ctrl Alt RightArrow # RS Highlight
Ctrl R R  # Rename
</pre>
        </div>

        <div>
            <h1>3 - Long Methods</h1>
            <ul>
                <li>Commonly methods are long, and can be split apart to make <b>simpler to understand</b></li>
                <li>20 line max methods, Rule of Thumb</li>
                <li>Minimize Parameters</li>
                <li>Avoid flag argumnets eg Render(bool useColour), could be RenderWithColour() and RenderWithoutColour()</li>
                <li>Favour methods which are <b>Commands</b> (ie do something and return void), or <b>Queries</b> (no side effects, return something) - CQS</li>
            </ul>
            <pre class="prettyprint" title="Useful VS and RS commands">
Ctrl Shift R  # RS Refactor this
Ctrl R M  # RS Extract Method
Shift Alt L # RS Go to file in Solution Explorer
</pre>
        </div>

        <div>
            <h1>4 - Unit Test</h1>
            <p>Red, Green, Refactor towards:</p>
            <ul>
                <li>Short methods which are more <b>easily testable</b> and <b>simpler</b></li>
                <li>Performance - measure using timings.. Can algorithm be smarter eg less iterations in loops</li>
            </ul>
        </div>

        <div>
            <h1>5 - Pragmatism</h1>
            <p></p>
            <p>
                A lot of developers like <b>shiny</b> things! Some actively disklike anything new. There is a healthy middle ground. As I'm in the former camp, I usually ask myself how much can you take out so the code is:
            </p>
            <ul>
                <li>Testable</li>
                <li>Easily understandable</li>
                <li>Simplest</li>
                <li>Performant (if that is needed)</li>
            </ul>
            <p>eg do you really need xyz Pattern? Latest thinking on blog article abc... Is an IoC container really necessary, or would Pure DI be easier for the next programmer to understand. ie you are programming for the next person to understand easily.</p>

            <p>
                Remember you are a <b>REAL</b> developer (IMO) if you are <b>pragmatic</b>
            </p>
        </div>

        <hr />
        <div>
            <h1>Examples!</h1>
            <p>
                Using the 0-5 steps above, I will walk through examples giving the path of getting to <b>good</b> code
            </p>
            <ul>
                <li>Euler1</li>
                <li>Euler17</li>
                <li>Fractals</li>
                <li>Console importer ETL</li>
                <li>World bank webservice game</li>
                <li>Databases (importer / ETL apps / MVC CRUD apps)</li>
                <li>CRUD with ADO</li>
                <li>CRUD with Dapper</li>
                <li>CRUD with Sprocs</li>
                <li>Validation</li>
                <li>Paging, Sorting and Filtering, and Profiling</li>
                <li>Exception handling, CQS, DI and IoC and Service Locator, Logging, Emailling</li>
                <li>Selenium style testing</li>
                <li>Refactoring a large application (OSS?)</li>
            </ul>

            <h2>Euler1</h2>
            <p>
                From <a href="https://projecteuler.net/problem=1">https://projecteuler.net/problem=1</a>
            </p>
            <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
            <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>

            <pre class="prettyprint">
// code here to demo a compiling but non working version
</pre>
            <a href="/pages/Euler1">Link to full article</a>

            <h2>Euler17</h2>
            <p>
                From <a href="https://projecteuler.net/problem=17">https://projecteuler.net/problem=17</a>
            </p>
            <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
            <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>

            <pre class="prettyprint">
// code here to demo a compiling but non working version
</pre>
            <a href="/pages/Euler17">Link to full article</a>


            <h2>Fractals</h2>
            <p>
                From <a href="http://23programs.blogspot.co.uk/2012/03/c-mandelbrot-set-fractal.html">here</a> a refactoring of this code
            </p>
            <p>A windows forms app for display Fractal images</p>

            <pre class="prettyprint">
// code
</pre>
            <a href="/pages/Euler17">Link to full article</a>
            <h2>CRUD with ADO</h2>
            <p>Customer and Address. 1 Customer can have many delivery addresses eg Home, Work, School</p>
            <p>This is a very simple example of</p>
            <ul>
                <li>Create Read Update Delete (CRUD)</li>
                <li>Customers</li>
                <li>Addresses</li>
            </ul>
            <p>Starting from the simplest MVC5 app, lets refactor:</p>
            <pre class="prettyprint">
// starting code 
</pre>
            <a href="/pages/CRUD_using_ADO">Link to full article</a>
        </div>
        @*        Conways GOL, 1 or 2 pages only of code, satnav shortest path code, ball bouncing back and forth*@
    </div>
</form>