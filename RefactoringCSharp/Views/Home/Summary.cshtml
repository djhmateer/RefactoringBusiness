
@{
    ViewBag.Title = "Summary";
}

<h2>Summary</h2>
<p>This website is a <b>work in progress</b>.  This is the current outline.  The left hand Refactoring column is the <a href="/">home</a> page</p>

<div class="row">
    <div class="col-md-3">
        <h2>Refactoring</h2>

        <p>
            <a href="/" title="0-x will follow a Storyline...I can safely undo any changes I make.  I can see whats changed over time.  http://www.barbarianmeetscoding.com/wiki/git-cheatsheet/">0 - Source</a>
        </p>
        <p>
            <a href="/" title="VS or R# makes it safe to rename.  Nouns vs Verbs.. suggestions for fields/properties/methods/classes">1 - Checks</a>
        </p>
        <p>
            <a href="/" title="Experience.. when to use /// style comments..  When to not use comments.  When projects documentation is very useful.">2 - Rename</a>
        </p>
        <p>
            <a href="/">3 - Long methods</a>
        </p>
        <p>
            <a href="/">4 - Tests</a>
        </p>
        <p>
            <a href="/">5 - Pragmatism</a>
        </p>
        <p>
            <hr />
        </p>
        <p>
            <a href="/">Refactoring Example</a>
        </p>
        <p>
            <hr />
        </p>
        <p>
            <a href="/" title="Do you understand the system?  In an enterprise documentation is important. https://leanpub.com/techtribesje  is a good example of documentation!  If you don't know the whole system, should you be 'making it better'?  https://www.youtube.com/watch?v=oDpdaXt0HQI&feature=youtu.be  and https://lostechies.com/andrewsiemer/2015/12/09/easy-way-to-gain-high-level-understanding/ ">a - Documentation</a>
        </p>

        <p>
            <a href="/" title="Principle of least surprise, KISS, YAGNI, DRY and Rule of 3. https://lostechies.com/derickbailey/2012/10/31/abstraction-the-rule-of-three/.  Is there a 'feature' that is missing eg  easy to change the codebase - compared to other software eg how quickly can I make a change?  Will explore the common pain points eg:  Features take a long time to dev, The codebase is hard to work with because it is complex, How to quantify what a 'good' codebase looks like eg cyclomatic complexity">b - Does it need refactoring?</a>
        </p>
        <p>
            <a href="/" title="Consistency is the <strike>hobgoblin of the unimaginative</strike>??  Coding 'standards' and why consistency across a project, and a company can be a good thing!">c - Style</a>
        </p>


        <p>
            <a href="/" title="Why code review?  Why read others code?">z - Code Reviews</a>
        </p>
    </div>
    <div class="col-md-3">
        <!-- Showing examples of doing it right! -->
        <h2>Bits</h2>
        <p>
            <a href="/" title="A great dev environment eg OneNote for sharing information.  GitShell.  DiffTool.  .\d to fire up project - how to open VS command prompt.  git push.  Very fast machine.  3 monitors.  Keyboard shortcuts.  JP Boodhoo.  Launchy to get stuff going fast.  Video to demo a good environment?  Automated!!!">Dev</a>
        </p>
        <p>
            <a href="/" title="Handling exceptions is great if done well - from the composition root downwards">Exceptions</a>
        </p>
        <p>
            <a href="/" title="Logging is great if done well - can easily debug what is happening in dev, test and prod.">Log</a>
        </p>
        <p>
            <a href="/" title="Unit / Integration / Site">Testing</a>
        </p>
        <p>
            <a href="/">SQL Refactoring</a>
        </p>
        <p>
            <a href="/" title="eg Miniprofiler to give you page load/sql query times as you develop">MiniProfiler</a>
        </p>
        <p>
            <a href="/" title="From marketing (Management love it when the app goes fast), Users (expect it), Developers can get more work done if the app runs fast.  Caching eg http://meta.stackexchange.com/questions/69164/does-stack-exchange-use-caching-and-if-so-how. See about page for most simple cache examples.  Then consider quickest wins for caching in business apps eg processing of data?  lookup tables?   IIS front end caching - simple. ">Speed/Caching</a>
        </p>
        <p>
            <a href="/" Title="All business users love reporting.  Can you ditch it to SSRS?  Easily export to Excel?  Do the reports look great?  Dashboards people love.">Reporting</a>
        </p>

    </div>
    <div class="col-md-3">
        <!-- Examples of proper code showing all these concepts -->
        <h2>Arch</h2>
        <p>
            <a href="/" title="Branching strategy, Pull Requests?, Release tagging">Source Control</a>
        </p>
        <p>
            <a href="/" title="Working fast with VS and ASP.NET . Get rid of those annoying 5s+ load time for asp.net to work">Debugging</a>
        </p>
        <p>
            <a href="/Page/ORM" title="EF Dapper etc vs ADO.NET and SP's  Where is EF useful?  RAD.  Simple CRUD apps.  What are the patterns which make it good to use?  Is it good for the 80% where you just want to CRUD up simple entities?  Use Julie Lerman's nice helpers.  Roll your own too!">ORMS</a>
        </p>
        <p>
            <a href="/" title="Pattern for DB access">Repository</a>
        </p>
        <p>
            <a href="/" title="Favour this!">Composition</a>
        </p>
        <p>
            <a href="/" title="Pure DI/Poor mans..composition root.. vs containers">Dependency Injection</a>
        </p>
        <p>
            <a href="/" title="When to use?">Ajax / SPA</a>
        </p>

        <p>
            <a href="/" title="Pattern for Logging and Caching">Decorator </a>
        </p>


        <p>
            <a href="/">DB Source</a>
        </p>
        <p>
            <a href="/" title="And usability.  Managers, managers, managers, and users all love to see beauty.  They will unfairly judge your application based on looks.">Aesthetics</a>
        </p>
        <p>
            <a href="/" title="Important (but not why you may think). I find people are overjoyed when their expectations are surpassed with application responsiveness.  This includes users, fellow developers and managers.  Even if speed is not in the spec, it is.  People can go irrationally nuts if something takes">Speed</a>
        </p>

        <p>
            <a href="/">SOLID</a>
        </p>
        <p>
            <a href="/" title="And CQRS">CQS</a>
        </p>

        <p>
            <a href="/">Maybe</a>
        </p>

        <p>
            <a href="/" title="eg MSMQ, RabbitMQ..When do I need to start using this...smells.  Typical use cases eg Email queue.  Probably performance of existing app would be a smell">Queuing</a>
        </p>
        <p>
            <hr />
        </p>
        <p>
            <a href="/" title="All hail the monolith. Quote from Postman website - getpostman.com.  Do I really need APIs to be building a modern software app.  Am I doing it wrong?  Good guide:  https://github.com/Yelp/service-principles   Favour a monolith for simpler systems http://martinfowler.com/bliki/MonolithFirst.html   build a simplistic version of it and see how well it works out  -> Lean Startup - learn quickly whether something is going to work or not - fail fast if not...    WCF or WebAPI. http://www.codefoster.com/webservicesforward/"> Monolith</a>
        </p>
        <p>
            <a href="/">Microservices</a>
        </p>

    </div>
    <div class="col-md-3">
        <h2>Deploy</h2>
        <p>
            <a href="/" title="Dev/Test/UAT/Prod..Automated and fast. Robocopy to Octopus...make rollback easy.  How to deploy in a large enterprise which has a very manual procedure which takes weeks. eg build number, git id, and build date eg https://techtribes.je/summary">Automated</a>
        </p>
        <p>
            <a href="/" title="and Continuous deployment">Continuous Integration</a>
        </p>
        <p>
            <a href="/" title="eg Stash / Kibana, stackoverflow monitoring">Monitoring</a>
        </p>
        <p>
            <a href="/" title="from Scheduled Task to backup db and copy to backup location to...">Backups</a>
        </p>

    </div>

    <div class="col-md-3">
        <h2 title="Templates for projects that are considered by others examples of 'doing it right'.  I've found it very hard to find 'good' examples of full blown apps.  Who writes well factored code open source?  http://c2.com/cgi/wiki?PleaseShowMeAlargeWellFactoredProgram">Examples</h2>
        <p>
            <a href="/" title="Sometimes this is the answer in an enterprise which have very junior developers which change often from different cultures.">MVC5 CRUD</a>
        </p>
        <p>
            <a href="/">Console App Importer</a>
        </p>
        <p>
            <a href="/">MVC5 Ajax</a>
        </p>
        <p>
            <a href="/">MVC5 SPA</a>
        </p>
        <p>
            <a href="/">Webforms</a>
        </p>
    </div>

    <div class="col-md-3">
        <h2 title="Standing on the shoulders of giants">Resources</h2>
        <p>
            <a href="/" title="Refactoring Legacy Code - Michael Feathers, Growing Object Oriented Software guided by tests">Books</a>
        </p>
        <p>
            <a href="/" title="Jeff Atwood - coding smells.  Joel spolsky 12 things.  Learn a language in 10 years.  Marc Seemann">Articles</a>
        </p>
        <p>
            <a href="/" title="ASP.NET MVC by Scott Allen.  Refactoring by Marc Seemann https://app.pluralsight.com/library/courses/encapsulation-solid ">Videos</a>
        </p>
    </div>
</div>

<hr/>

<h1>To Be Classified</h1>
<div>
    <p>
        Here is a <b>finished example*</b> (not yet) of refactoring. Over many years I've found it hard to find examples of what I consider to be good code (although according to Feathers, <b>good code has to be under test</b>). You may not agree with this. There is <b>always a better way</b>.
    </p>
    <pre class="prettyprint">
using System;
using System.Data.SqlClient;
using System.IO;
namespace Mateer.RSharpCommentsAndDeadCode
{
    // This Console App is run from a scheduled task nightly on the App server
    // to import in dumped files which the Oracle team put there
    // It should try each line independently and be resilient if the line fails to parse
    // It should send an email on a line fail, or global exception
    // It should log to a database table
    public class ETL
    {
        public static void ReadFromAFileAndDisplayQuote()
        {
            var fileTextLines = File.ReadAllLines(@@"..\..\quotesWithTitles.csv");
            foreach (string line in fileTextLines)
            {
                string[] titleAndQuote = line.Split(',');
                string title = titleAndQuote[0];
                Console.WriteLine("title: {0}", title);
                string quote = titleAndQuote[1];
                Console.WriteLine("quote: {0}", quote);
                var connectionString = @@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Dev\Refactoring\PresentationRefactoring\Database1.mdf;Integrated Security=True";
                using (var connection = new SqlConnection(connectionString))
                {
                    using (var cmd = new SqlCommand("INSERT INTO Quotes (Title, Text) VALUES (@@Title, @@Quote)", connection))
                    {
                        cmd.Parameters.AddWithValue("@@Title", title);
                        cmd.Parameters.AddWithValue("@@Quote", quote);
                        connection.Open();
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }
    }
}
</pre>
</div>

<div>
    <h1>a - Documentation</h1>
    <p>
        Do you have a simple document which:
    </p>
    <ul>
        <li>1 - Gives an introduction to the whole project</li>
        <li>2 - Context - Includes a <b>context diagram</b> explaining the whole system</li>
        <li>3 - Functional requirements - what does the system do in English using DSL</li>
        <li>4 - Quality (non Functional requirements) - eg performance, scalability, security, browser compatibility, localisation, I18n</li>
        <li>5 - Constraints - eg budget</li>
        <li>6 - Design principles - eg package by component vs package by layer?, Testing (unit and integration)</li>
        <li>7 - Software Architecture - more detailed diagram showing containers eg Web app, DB, Filesystem, NoSQL, Scheduled task app, external systems</li>
        <li>8 - Infrastructure Architecture - eg where is live server, and credentials to get there</li>
        <li>9 - Deployment - github, TeamCity to deploy file.</li>
        <li>10 - Operation and Support - how to check if services are running, and how to restart. How to monitor eg pingdom/uptimerobot. Backups video Dropbox.</li>
    </ul>
    <p>
        Above taken from <a href="https://leanpub.com/techtribesje" target="_blank">https://leanpub.com/techtribesje</a> which is available to read online for free.
    </p>
    <p>
        <a href="https://www.youtube.com/watch?v=oDpdaXt0HQI&feature=youtu.be" target="_blank">https://www.youtube.com/watch?v=oDpdaXt0HQI&feature=youtu.be</a>
    </p>
    <p>
        <a href="https://lostechies.com/andrewsiemer/2015/12/09/easy-way-to-gain-high-level-understanding/" target="_blank">https://lostechies.com/andrewsiemer/2015/12/09/easy-way-to-gain-high-level-understanding/</a>
    </p>
</div>

<div>
    <h1>b - Does it need Refactoring?</h1>
    <blockquote>
        Any programmer worth his or her salt should already be refactoring aggressively
        <div class="small">Jeff Atwood - co-founder of StackOverflow</div>
    </blockquote>

    <p>
        From <a href="http://blog.codinghorror.com/code-smells/">http://blog.codinghorror.com/code-smells/</a> are there any <b>smells</b> in your current code? If yes, refactor!
    </p>


    <p>
        Principle of least surprise, KISS, YAGNI, DRY and Rule of 3. https://lostechies.com/derickbailey/2012/10/31/abstraction-the-rule-of-three/. Is there a 'feature' that is missing eg easy to change the codebase - compared to other software eg how quickly can I make a change? Will explore the common pain points eg: Features take a long time to dev, The codebase is hard to work with because it is complex, How to quantify what a 'good' codebase looks like eg cyclomatic complexity
    </p>
</div>

<div>
    <h1>0 - Source Control</h1>

    <p>
        Source control is a <b>good thing</b>. Let's consider <b>Git</b> as it is easy to use locally. For refactoring I like to be able to:
    </p>
    <ul>
        <li>Review what has changed</li>
        <li>Be able to revert back</li>
        <li>Git Posh (PowerShell) - installed automatically with <a href="https://desktop.github.com/">https://desktop.github.com/</a></li>
        <li>Set font in PowerShell to Lucida Console 12, Set clone path to c:\dev in GitHub Desktop (gears options top right) so gitshell opens there by default</li>
        <li><a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore " target="_blank">Gitignore VisualStudio</a></li>
        <li><a href="https://github.com/djhmateer/RefactoringBusiness/blob/master/d.ps1">.\d trick to open solution from GitShell</a></li>
        <li>
            <a href="http://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298">Git lg alias</a>,
            <a href="http://www.programgood.net/2015/08/21/ChromeNotepadAndDifftool.aspx" _target="_blank">Difftool and Mergetool setup</a>,
            <a href="http://www.barbarianmeetscoding.com/wiki/git-cheatsheet/" target="_blank">Git Cheatsheet (full)</a>,
            <a href="http://haacked.com/archive/2014/07/28/github-flow-aliases/">Phil Haack tips</a>
        </li>
    </ul>

    <p>Useful Git commands</p>
<pre class="prettyprint" title="Useful git commands">
Copy ..\Refactoring\.gitignore . # Copy in a .gitignore file from a local project
Copy ..\Refactoring\d.ps1 # Shortcut to load solution 
.\d # Run solution from command line
git init  # Initialise the git repo.  eg in c:\dev\Euler22  do a git init.
dir -Force # See hidden folders eg .git
git add . # Add all files (but not ones in the .gitignore file)
git add -A . # Include deletes in the 'add'
git commit -m "initial commit"
git commit -am "initial commit" # Add and commit in the same line
git push
git pull
git rm directory\file  # Deletes the file from local filesystem and git (but still in history)
git rm -r packages # Recursively deletes the packages folder
git mergetool # Use the VS merge tool 
git difftool  # Easy in VS2015 to right click and do show history
git diff --cached # What is in staging compared to last commit
git checkout -b FeatureBranchName # Branch and checkout
git branch # Show branches
git merge Master # Do this whilst on feature branch
git checkout Master
git reset bc2d7  # Undoes all commits after bc2d7 (first 5 chars of hash), preserving changes locally
git reset --hard bc2d7 # Undoes all commits after bc2d7, discarding local changes
git push origin master --force  # Force the push
git log # Show commits
git lg # Show one liners (see link above for alias)
git checkout -- . # Discard all changes in working directory, leaving any new files intact
git checkout da69cce # Puts head back to that commit!  Note - no longer on a branch, so need to checkout master below:
git checkout master # Goes back
git mv .\Eulor17_AG\ .\Euler17 # Move a directory - smarter than rename in explorer
git tag BeforeStage1
git push --tags
</pre>

</div>

<div>
    <h1>5 - Pragmatism</h1>
    <p></p>
    <p>
        A lot of developers like <b>shiny</b> things! Some actively disklike anything new. There is a healthy middle ground. As I'm in the former camp, I usually ask myself how much can you take out so the code is:
    </p>
    <ul>
        <li>Testable</li>
        <li>Easily understandable</li>
        <li>Simplest</li>
        <li>Performant (if that is needed)</li>
    </ul>
    <p>eg do you really need xyz Pattern? Latest thinking on blog article abc... Is an IoC container really necessary, or would Pure DI be easier for the next programmer to understand. ie you are programming for the next person to understand easily.</p>

    <p>
        Remember you are a <b>REAL</b> developer (IMO) if you are <b>pragmatic</b>
    </p>
</div>




<div>
    <h1>z - Code Reviews</h1>

    <p>Goals of a Code Review</p>

    <ul>
        <li>Spread the knowledge in the team</li>
        <li>Make the code 'better'</li>
        <li>Make programmers better by learning off each other</li>
    </ul>

    <p>
        From <a href="http://ayende.com/blog/3475/code-reviews-are-not-just-about-the-code">link</a>
    </p>

    <blockquote>
        <p>The most important thing ... is the actual interaction in code reviews.</p>
        <p>1 - Go over the code with only a general idea of what is going on, to find out if there are any areas which need special attention. Then talk to developer</p>
        <p>2 - Go over the code each line at least once. Then chat to the developer</p>
    </blockquote>


    <h3>general feedback</h3>
    <ul>
        <li>comments unnecessary?</li>
        <li>split into a few functions from Main()</li>
        <li>test those new function - do they pass the examples given eg COLIN?</li>
    </ul>

    <h3>specific feedback</h3>
    <ul>
        <li>make algorithm simpler!</li>
        <li>sorting... better way!</li>
        <li>reading from a file then parsing</li>
    </ul>
</div>

<p>
    <hr />
</p>

<div>
    <h1>Code Smells</h1>
    <p>Perhaps it is easier to look at code, and consider if it <b>smells</b>?</p>
    <ul>
        <li>Long method</li>
        <li>Too many parameters </li>
        <li>Complexity</li>
        <li>Duplication</li>
    </ul>
    <p><a href="http://blog.codinghorror.com/code-smells/">http://blog.codinghorror.com/code-smells/</a></p>
</div>

<p>
    <hr />
</p>




<div>
    <h1>SQL Refactoring</h1>

    <p>A good start is to alwyas keep an eye on the quries the app is actually doing eg Miniprofiler to give you page load/sql query times as you develop</p>
    <p>
        <a href="http://ayende.com/blog/4505/analyzing-the-mvc-music-store-data-access">http://ayende.com/blog/4505/analyzing-the-mvc-music-store-data-access</a>
    </p>
</div>

<div>
    <h1>Architecture</h1>
    <p>KISS</p>
    <p>
        <a href="http://ayende.com/blog/19457/review-microsoft-n-layer-app-sample-part-i">http://ayende.com/blog/19457/review-microsoft-n-layer-app-sample-part-i</a>
    </p>
</div>
.